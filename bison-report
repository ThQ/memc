Terminals unused in grammar

   T_AROBASE
   T_INTERFACE
   T_LBRACKET
   T_LITERAL_FLOAT
   T_LITERAL_HEX
   T_NEW
   T_PATCH
   T_PRIMITIVE
   T_OBJECT
   T_RBRACKET
   T_LEFT_BINARY_OP
   T_SELF


State 77 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 107 conflicts: 13 shift/reduce
State 118 conflicts: 13 shift/reduce


Grammar

    0 $accept: input $end

    1 input: /* empty */
    2      | input T_NEWLINE
    3      | input T_DEDENT
    4      | input T_WHITESPACE T_NEWLINE
    5      | input use
    6      | input type_declaration

    7 use: T_USE T_ID T_NEWLINE

    8 type_block: T_NEWLINE T_INDENT top_level_statements T_DEDENT

    9 type_declaration: class_declaration

   10 class_declaration: T_CLASS id type_block
   11                  | T_CLASS id T_LT id type_block

   12 if: T_IF expr block
   13   | T_IF expr block T_ELSE block

   14 while: T_WHILE expr block

   15 block: T_NEWLINE T_INDENT statements T_DEDENT

   16 statements: statement
   17           | statements statement

   18 statement: expr T_NEWLINE
   19          | simple_statement
   20          | compound_statement

   21 compound_statement: if
   22                   | while

   23 simple_statement: variable_declaration
   24                 | return_statement

   25 return_statement: T_RETURN expr

   26 top_level_statement: member_declaration
   27                    | function_declaration
   28                    | T_PASS T_NEWLINE

   29 top_level_statements: top_level_statement
   30                     | top_level_statements top_level_statement

   31 function_name: T_ID
   32              | T_STRING

   33 function_declaration: function_name T_OP T_CP T_RARR type_name T_NEWLINE
   34                     | function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE
   35                     | function_name T_OP T_CP T_RARR type_name block
   36                     | function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name block

   37 member_declaration: id T_SEMICOLON type_name T_NEWLINE

   38 function_declaration_parameter_list: function_declaration_parameter
   39                                    | function_declaration_parameter_list T_COMMA function_declaration_parameter

   40 function_declaration_parameter: id T_SEMICOLON type_name

   41 type_name: qualified_id

   42 variable_declaration: id T_SEMICOLON type_name T_NEWLINE
   43                     | id T_SEMICOLON T_EQ expr T_NEWLINE
   44                     | id T_SEMICOLON type_name T_EQ expr T_NEWLINE

   45 id: T_ID

   46 qualified_id: id
   47             | qualified_id T_DOT id

   48 dot_expr: expr T_DOT id

   49 expr: literal
   50     | dot_expr
   51     | binary_expr
   52     | left_unary_expr
   53     | T_OP expr T_CP
   54     | qualified_id
   55     | call

   56 binary_operator: T_DIV
   57                | T_EQ_EQ
   58                | T_LT
   59                | T_LARR_EQ
   60                | T_MINUS
   61                | T_MODULO
   62                | T_MUL
   63                | T_MUL_MUL
   64                | T_PLUS
   65                | T_GT
   66                | T_RARR_EQ

   67 left_unary_operator: T_BANG
   68                    | T_MINUS_MINUS
   69                    | T_PLUS_PLUS

   70 binary_expr: expr binary_operator expr

   71 left_unary_expr: left_unary_operator expr

   72 expr_list: expr
   73          | expr_list T_COMMA expr

   74 call: expr T_OP T_CP
   75     | expr T_OP expr_list T_CP

   76 literal: T_LITERAL_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
T_AROBASE (258)
T_CLASS (259) 10 11
T_COMMA (260) 39 73
T_CP (261) 33 34 35 36 53 74 75
T_DEDENT (262) 3 8 15
T_DOT (263) 47 48
T_ELSE (264) 13
T_EQ (265) 43 44
T_IF (266) 12 13
T_ID (267) 7 31 45
T_INDENT (268) 8 15
T_INTERFACE (269)
T_LBRACKET (270)
T_LITERAL_FLOAT (271)
T_LITERAL_HEX (272)
T_LITERAL_INT (273) 76
T_NEW (274)
T_NEWLINE (275) 2 4 7 8 15 18 28 33 34 37 42 43 44
T_OP (276) 33 34 35 36 53 74 75
T_PASS (277) 28
T_PATCH (278)
T_PRIMITIVE (279)
T_OBJECT (280)
T_RBRACKET (281)
T_RARR (282) 33 34 35 36
T_STRING (283) 32
T_USE (284) 7
T_WHITESPACE (285) 4
T_LEFT_BINARY_OP (286)
T_RETURN (287) 25
T_SEMICOLON (288) 37 40 42 43 44
T_WHILE (289) 14
T_SELF (290)
T_BANG (291) 67
T_LARR_EQ (292) 59
T_LT (293) 11 58
T_RARR_EQ (294) 66
T_GT (295) 65
T_EQ_EQ (296) 57
T_PLUS (297) 64
T_MINUS (298) 60
T_DIV (299) 56
T_MUL (300) 62
T_MODULO (301) 61
T_MUL_MUL (302) 63
T_PLUS_PLUS (303) 69
T_MINUS_MINUS (304) 68


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
input (51)
    on left: 1 2 3 4 5 6, on right: 0 2 3 4 5 6
use (52)
    on left: 7, on right: 5
type_block (53)
    on left: 8, on right: 10 11
type_declaration (54)
    on left: 9, on right: 6
class_declaration (55)
    on left: 10 11, on right: 9
if (56)
    on left: 12 13, on right: 21
while (57)
    on left: 14, on right: 22
block (58)
    on left: 15, on right: 12 13 14 35 36
statements (59)
    on left: 16 17, on right: 15 17
statement (60)
    on left: 18 19 20, on right: 16 17
compound_statement (61)
    on left: 21 22, on right: 20
simple_statement (62)
    on left: 23 24, on right: 19
return_statement (63)
    on left: 25, on right: 24
top_level_statement (64)
    on left: 26 27 28, on right: 29 30
top_level_statements (65)
    on left: 29 30, on right: 8 30
function_name (66)
    on left: 31 32, on right: 33 34 35 36
function_declaration (67)
    on left: 33 34 35 36, on right: 27
member_declaration (68)
    on left: 37, on right: 26
function_declaration_parameter_list (69)
    on left: 38 39, on right: 34 36 39
function_declaration_parameter (70)
    on left: 40, on right: 38 39
type_name (71)
    on left: 41, on right: 33 34 35 36 37 40 42 44
variable_declaration (72)
    on left: 42 43 44, on right: 23
id (73)
    on left: 45, on right: 10 11 37 40 42 43 44 46 47 48
qualified_id (74)
    on left: 46 47, on right: 41 47 54
dot_expr (75)
    on left: 48, on right: 50
expr (76)
    on left: 49 50 51 52 53 54 55, on right: 12 13 14 18 25 43 44 48
    53 70 71 72 73 74 75
binary_operator (77)
    on left: 56 57 58 59 60 61 62 63 64 65 66, on right: 70
left_unary_operator (78)
    on left: 67 68 69, on right: 71
binary_expr (79)
    on left: 70, on right: 51
left_unary_expr (80)
    on left: 71, on right: 52
expr_list (81)
    on left: 72 73, on right: 73 75
call (82)
    on left: 74 75, on right: 55
literal (83)
    on left: 76, on right: 49


state 0

    0 $accept: . input $end
    1 input: .
    2      | . input T_NEWLINE
    3      | . input T_DEDENT
    4      | . input T_WHITESPACE T_NEWLINE
    5      | . input use
    6      | . input type_declaration

    $default  reduce using rule 1 (input)

    input  go to state 1


state 1

    0 $accept: input . $end
    2 input: input . T_NEWLINE
    3      | input . T_DEDENT
    4      | input . T_WHITESPACE T_NEWLINE
    5      | input . use
    6      | input . type_declaration
    7 use: . T_USE T_ID T_NEWLINE
    9 type_declaration: . class_declaration
   10 class_declaration: . T_CLASS id type_block
   11                  | . T_CLASS id T_LT id type_block

    $end          shift, and go to state 2
    T_CLASS       shift, and go to state 3
    T_DEDENT      shift, and go to state 4
    T_NEWLINE     shift, and go to state 5
    T_USE         shift, and go to state 6
    T_WHITESPACE  shift, and go to state 7

    use                go to state 8
    type_declaration   go to state 9
    class_declaration  go to state 10


state 2

    0 $accept: input $end .

    $default  accept


state 3

   10 class_declaration: T_CLASS . id type_block
   11                  | T_CLASS . id T_LT id type_block
   45 id: . T_ID

    T_ID  shift, and go to state 11

    id  go to state 12


state 4

    3 input: input T_DEDENT .

    $default  reduce using rule 3 (input)


state 5

    2 input: input T_NEWLINE .

    $default  reduce using rule 2 (input)


state 6

    7 use: T_USE . T_ID T_NEWLINE

    T_ID  shift, and go to state 13


state 7

    4 input: input T_WHITESPACE . T_NEWLINE

    T_NEWLINE  shift, and go to state 14


state 8

    5 input: input use .

    $default  reduce using rule 5 (input)


state 9

    6 input: input type_declaration .

    $default  reduce using rule 6 (input)


state 10

    9 type_declaration: class_declaration .

    $default  reduce using rule 9 (type_declaration)


state 11

   45 id: T_ID .

    $default  reduce using rule 45 (id)


state 12

    8 type_block: . T_NEWLINE T_INDENT top_level_statements T_DEDENT
   10 class_declaration: T_CLASS id . type_block
   11                  | T_CLASS id . T_LT id type_block

    T_NEWLINE  shift, and go to state 15
    T_LT       shift, and go to state 16

    type_block  go to state 17


state 13

    7 use: T_USE T_ID . T_NEWLINE

    T_NEWLINE  shift, and go to state 18


state 14

    4 input: input T_WHITESPACE T_NEWLINE .

    $default  reduce using rule 4 (input)


state 15

    8 type_block: T_NEWLINE . T_INDENT top_level_statements T_DEDENT

    T_INDENT  shift, and go to state 19


state 16

   11 class_declaration: T_CLASS id T_LT . id type_block
   45 id: . T_ID

    T_ID  shift, and go to state 11

    id  go to state 20


state 17

   10 class_declaration: T_CLASS id type_block .

    $default  reduce using rule 10 (class_declaration)


state 18

    7 use: T_USE T_ID T_NEWLINE .

    $default  reduce using rule 7 (use)


state 19

    8 type_block: T_NEWLINE T_INDENT . top_level_statements T_DEDENT
   26 top_level_statement: . member_declaration
   27                    | . function_declaration
   28                    | . T_PASS T_NEWLINE
   29 top_level_statements: . top_level_statement
   30                     | . top_level_statements top_level_statement
   31 function_name: . T_ID
   32              | . T_STRING
   33 function_declaration: . function_name T_OP T_CP T_RARR type_name T_NEWLINE
   34                     | . function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE
   35                     | . function_name T_OP T_CP T_RARR type_name block
   36                     | . function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name block
   37 member_declaration: . id T_SEMICOLON type_name T_NEWLINE
   45 id: . T_ID

    T_ID      shift, and go to state 21
    T_PASS    shift, and go to state 22
    T_STRING  shift, and go to state 23

    top_level_statement   go to state 24
    top_level_statements  go to state 25
    function_name         go to state 26
    function_declaration  go to state 27
    member_declaration    go to state 28
    id                    go to state 29


state 20

    8 type_block: . T_NEWLINE T_INDENT top_level_statements T_DEDENT
   11 class_declaration: T_CLASS id T_LT id . type_block

    T_NEWLINE  shift, and go to state 15

    type_block  go to state 30


state 21

   31 function_name: T_ID .  [T_OP]
   45 id: T_ID .  [T_SEMICOLON]

    T_SEMICOLON  reduce using rule 45 (id)
    $default     reduce using rule 31 (function_name)


state 22

   28 top_level_statement: T_PASS . T_NEWLINE

    T_NEWLINE  shift, and go to state 31


state 23

   32 function_name: T_STRING .

    $default  reduce using rule 32 (function_name)


state 24

   29 top_level_statements: top_level_statement .

    $default  reduce using rule 29 (top_level_statements)


state 25

    8 type_block: T_NEWLINE T_INDENT top_level_statements . T_DEDENT
   26 top_level_statement: . member_declaration
   27                    | . function_declaration
   28                    | . T_PASS T_NEWLINE
   30 top_level_statements: top_level_statements . top_level_statement
   31 function_name: . T_ID
   32              | . T_STRING
   33 function_declaration: . function_name T_OP T_CP T_RARR type_name T_NEWLINE
   34                     | . function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE
   35                     | . function_name T_OP T_CP T_RARR type_name block
   36                     | . function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name block
   37 member_declaration: . id T_SEMICOLON type_name T_NEWLINE
   45 id: . T_ID

    T_DEDENT  shift, and go to state 32
    T_ID      shift, and go to state 21
    T_PASS    shift, and go to state 22
    T_STRING  shift, and go to state 23

    top_level_statement   go to state 33
    function_name         go to state 26
    function_declaration  go to state 27
    member_declaration    go to state 28
    id                    go to state 29


state 26

   33 function_declaration: function_name . T_OP T_CP T_RARR type_name T_NEWLINE
   34                     | function_name . T_OP function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE
   35                     | function_name . T_OP T_CP T_RARR type_name block
   36                     | function_name . T_OP function_declaration_parameter_list T_CP T_RARR type_name block

    T_OP  shift, and go to state 34


state 27

   27 top_level_statement: function_declaration .

    $default  reduce using rule 27 (top_level_statement)


state 28

   26 top_level_statement: member_declaration .

    $default  reduce using rule 26 (top_level_statement)


state 29

   37 member_declaration: id . T_SEMICOLON type_name T_NEWLINE

    T_SEMICOLON  shift, and go to state 35


state 30

   11 class_declaration: T_CLASS id T_LT id type_block .

    $default  reduce using rule 11 (class_declaration)


state 31

   28 top_level_statement: T_PASS T_NEWLINE .

    $default  reduce using rule 28 (top_level_statement)


state 32

    8 type_block: T_NEWLINE T_INDENT top_level_statements T_DEDENT .

    $default  reduce using rule 8 (type_block)


state 33

   30 top_level_statements: top_level_statements top_level_statement .

    $default  reduce using rule 30 (top_level_statements)


state 34

   33 function_declaration: function_name T_OP . T_CP T_RARR type_name T_NEWLINE
   34                     | function_name T_OP . function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE
   35                     | function_name T_OP . T_CP T_RARR type_name block
   36                     | function_name T_OP . function_declaration_parameter_list T_CP T_RARR type_name block
   38 function_declaration_parameter_list: . function_declaration_parameter
   39                                    | . function_declaration_parameter_list T_COMMA function_declaration_parameter
   40 function_declaration_parameter: . id T_SEMICOLON type_name
   45 id: . T_ID

    T_CP  shift, and go to state 36
    T_ID  shift, and go to state 11

    function_declaration_parameter_list  go to state 37
    function_declaration_parameter       go to state 38
    id                                   go to state 39


state 35

   37 member_declaration: id T_SEMICOLON . type_name T_NEWLINE
   41 type_name: . qualified_id
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id

    T_ID  shift, and go to state 11

    type_name     go to state 40
    id            go to state 41
    qualified_id  go to state 42


state 36

   33 function_declaration: function_name T_OP T_CP . T_RARR type_name T_NEWLINE
   35                     | function_name T_OP T_CP . T_RARR type_name block

    T_RARR  shift, and go to state 43


state 37

   34 function_declaration: function_name T_OP function_declaration_parameter_list . T_CP T_RARR type_name T_NEWLINE
   36                     | function_name T_OP function_declaration_parameter_list . T_CP T_RARR type_name block
   39 function_declaration_parameter_list: function_declaration_parameter_list . T_COMMA function_declaration_parameter

    T_COMMA  shift, and go to state 44
    T_CP     shift, and go to state 45


state 38

   38 function_declaration_parameter_list: function_declaration_parameter .

    $default  reduce using rule 38 (function_declaration_parameter_list)


state 39

   40 function_declaration_parameter: id . T_SEMICOLON type_name

    T_SEMICOLON  shift, and go to state 46


state 40

   37 member_declaration: id T_SEMICOLON type_name . T_NEWLINE

    T_NEWLINE  shift, and go to state 47


state 41

   46 qualified_id: id .

    $default  reduce using rule 46 (qualified_id)


state 42

   41 type_name: qualified_id .  [T_COMMA, T_CP, T_EQ, T_NEWLINE]
   47 qualified_id: qualified_id . T_DOT id

    T_DOT  shift, and go to state 48

    $default  reduce using rule 41 (type_name)


state 43

   33 function_declaration: function_name T_OP T_CP T_RARR . type_name T_NEWLINE
   35                     | function_name T_OP T_CP T_RARR . type_name block
   41 type_name: . qualified_id
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id

    T_ID  shift, and go to state 11

    type_name     go to state 49
    id            go to state 41
    qualified_id  go to state 42


state 44

   39 function_declaration_parameter_list: function_declaration_parameter_list T_COMMA . function_declaration_parameter
   40 function_declaration_parameter: . id T_SEMICOLON type_name
   45 id: . T_ID

    T_ID  shift, and go to state 11

    function_declaration_parameter  go to state 50
    id                              go to state 39


state 45

   34 function_declaration: function_name T_OP function_declaration_parameter_list T_CP . T_RARR type_name T_NEWLINE
   36                     | function_name T_OP function_declaration_parameter_list T_CP . T_RARR type_name block

    T_RARR  shift, and go to state 51


state 46

   40 function_declaration_parameter: id T_SEMICOLON . type_name
   41 type_name: . qualified_id
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id

    T_ID  shift, and go to state 11

    type_name     go to state 52
    id            go to state 41
    qualified_id  go to state 42


state 47

   37 member_declaration: id T_SEMICOLON type_name T_NEWLINE .

    $default  reduce using rule 37 (member_declaration)


state 48

   45 id: . T_ID
   47 qualified_id: qualified_id T_DOT . id

    T_ID  shift, and go to state 11

    id  go to state 53


state 49

   15 block: . T_NEWLINE T_INDENT statements T_DEDENT
   33 function_declaration: function_name T_OP T_CP T_RARR type_name . T_NEWLINE
   35                     | function_name T_OP T_CP T_RARR type_name . block

    T_NEWLINE  shift, and go to state 54

    block  go to state 55


state 50

   39 function_declaration_parameter_list: function_declaration_parameter_list T_COMMA function_declaration_parameter .

    $default  reduce using rule 39 (function_declaration_parameter_list)


state 51

   34 function_declaration: function_name T_OP function_declaration_parameter_list T_CP T_RARR . type_name T_NEWLINE
   36                     | function_name T_OP function_declaration_parameter_list T_CP T_RARR . type_name block
   41 type_name: . qualified_id
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id

    T_ID  shift, and go to state 11

    type_name     go to state 56
    id            go to state 41
    qualified_id  go to state 42


state 52

   40 function_declaration_parameter: id T_SEMICOLON type_name .

    $default  reduce using rule 40 (function_declaration_parameter)


state 53

   47 qualified_id: qualified_id T_DOT id .

    $default  reduce using rule 47 (qualified_id)


state 54

   15 block: T_NEWLINE . T_INDENT statements T_DEDENT
   33 function_declaration: function_name T_OP T_CP T_RARR type_name T_NEWLINE .  [T_DEDENT, T_ID, T_PASS, T_STRING]

    T_INDENT  shift, and go to state 57

    $default  reduce using rule 33 (function_declaration)


state 55

   35 function_declaration: function_name T_OP T_CP T_RARR type_name block .

    $default  reduce using rule 35 (function_declaration)


state 56

   15 block: . T_NEWLINE T_INDENT statements T_DEDENT
   34 function_declaration: function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name . T_NEWLINE
   36                     | function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name . block

    T_NEWLINE  shift, and go to state 58

    block  go to state 59


state 57

   12 if: . T_IF expr block
   13   | . T_IF expr block T_ELSE block
   14 while: . T_WHILE expr block
   15 block: T_NEWLINE T_INDENT . statements T_DEDENT
   16 statements: . statement
   17           | . statements statement
   18 statement: . expr T_NEWLINE
   19          | . simple_statement
   20          | . compound_statement
   21 compound_statement: . if
   22                   | . while
   23 simple_statement: . variable_declaration
   24                 | . return_statement
   25 return_statement: . T_RETURN expr
   42 variable_declaration: . id T_SEMICOLON type_name T_NEWLINE
   43                     | . id T_SEMICOLON T_EQ expr T_NEWLINE
   44                     | . id T_SEMICOLON type_name T_EQ expr T_NEWLINE
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_IF           shift, and go to state 60
    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_RETURN       shift, and go to state 63
    T_WHILE        shift, and go to state 64
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    if                    go to state 68
    while                 go to state 69
    statements            go to state 70
    statement             go to state 71
    compound_statement    go to state 72
    simple_statement      go to state 73
    return_statement      go to state 74
    variable_declaration  go to state 75
    id                    go to state 76
    qualified_id          go to state 77
    dot_expr              go to state 78
    expr                  go to state 79
    left_unary_operator   go to state 80
    binary_expr           go to state 81
    left_unary_expr       go to state 82
    call                  go to state 83
    literal               go to state 84


state 58

   15 block: T_NEWLINE . T_INDENT statements T_DEDENT
   34 function_declaration: function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name T_NEWLINE .  [T_DEDENT, T_ID, T_PASS, T_STRING]

    T_INDENT  shift, and go to state 57

    $default  reduce using rule 34 (function_declaration)


state 59

   36 function_declaration: function_name T_OP function_declaration_parameter_list T_CP T_RARR type_name block .

    $default  reduce using rule 36 (function_declaration)


state 60

   12 if: T_IF . expr block
   13   | T_IF . expr block T_ELSE block
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 85
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 61

   76 literal: T_LITERAL_INT .

    $default  reduce using rule 76 (literal)


state 62

   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   53     | T_OP . expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 86
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 63

   25 return_statement: T_RETURN . expr
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 87
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 64

   14 while: T_WHILE . expr block
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 88
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 65

   67 left_unary_operator: T_BANG .

    $default  reduce using rule 67 (left_unary_operator)


state 66

   69 left_unary_operator: T_PLUS_PLUS .

    $default  reduce using rule 69 (left_unary_operator)


state 67

   68 left_unary_operator: T_MINUS_MINUS .

    $default  reduce using rule 68 (left_unary_operator)


state 68

   21 compound_statement: if .

    $default  reduce using rule 21 (compound_statement)


state 69

   22 compound_statement: while .

    $default  reduce using rule 22 (compound_statement)


state 70

   12 if: . T_IF expr block
   13   | . T_IF expr block T_ELSE block
   14 while: . T_WHILE expr block
   15 block: T_NEWLINE T_INDENT statements . T_DEDENT
   17 statements: statements . statement
   18 statement: . expr T_NEWLINE
   19          | . simple_statement
   20          | . compound_statement
   21 compound_statement: . if
   22                   | . while
   23 simple_statement: . variable_declaration
   24                 | . return_statement
   25 return_statement: . T_RETURN expr
   42 variable_declaration: . id T_SEMICOLON type_name T_NEWLINE
   43                     | . id T_SEMICOLON T_EQ expr T_NEWLINE
   44                     | . id T_SEMICOLON type_name T_EQ expr T_NEWLINE
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_DEDENT       shift, and go to state 89
    T_IF           shift, and go to state 60
    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_RETURN       shift, and go to state 63
    T_WHILE        shift, and go to state 64
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    if                    go to state 68
    while                 go to state 69
    statement             go to state 90
    compound_statement    go to state 72
    simple_statement      go to state 73
    return_statement      go to state 74
    variable_declaration  go to state 75
    id                    go to state 76
    qualified_id          go to state 77
    dot_expr              go to state 78
    expr                  go to state 79
    left_unary_operator   go to state 80
    binary_expr           go to state 81
    left_unary_expr       go to state 82
    call                  go to state 83
    literal               go to state 84


state 71

   16 statements: statement .

    $default  reduce using rule 16 (statements)


state 72

   20 statement: compound_statement .

    $default  reduce using rule 20 (statement)


state 73

   19 statement: simple_statement .

    $default  reduce using rule 19 (statement)


state 74

   24 simple_statement: return_statement .

    $default  reduce using rule 24 (simple_statement)


state 75

   23 simple_statement: variable_declaration .

    $default  reduce using rule 23 (simple_statement)


state 76

   42 variable_declaration: id . T_SEMICOLON type_name T_NEWLINE
   43                     | id . T_SEMICOLON T_EQ expr T_NEWLINE
   44                     | id . T_SEMICOLON type_name T_EQ expr T_NEWLINE
   46 qualified_id: id .  [T_DOT, T_NEWLINE, T_OP, T_LARR_EQ, T_LT, T_RARR_EQ, T_GT, T_EQ_EQ, T_PLUS, T_MINUS, T_DIV, T_MUL, T_MODULO, T_MUL_MUL]

    T_SEMICOLON  shift, and go to state 91

    $default  reduce using rule 46 (qualified_id)


state 77

   47 qualified_id: qualified_id . T_DOT id
   54 expr: qualified_id .  [T_COMMA, T_CP, T_DEDENT, T_DOT, T_IF, T_ID, T_LITERAL_INT, T_NEWLINE, T_OP, T_RETURN, T_WHILE, T_BANG, T_LARR_EQ, T_LT, T_RARR_EQ, T_GT, T_EQ_EQ, T_PLUS, T_MINUS, T_DIV, T_MUL, T_MODULO, T_MUL_MUL, T_PLUS_PLUS, T_MINUS_MINUS]

    T_DOT  shift, and go to state 48

    T_DOT     [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


state 78

   50 expr: dot_expr .

    $default  reduce using rule 50 (expr)


state 79

   18 statement: expr . T_NEWLINE
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_NEWLINE  shift, and go to state 93
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    binary_operator  go to state 106


state 80

   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   71                | left_unary_operator . expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 107
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 81

   51 expr: binary_expr .

    $default  reduce using rule 51 (expr)


state 82

   52 expr: left_unary_expr .

    $default  reduce using rule 52 (expr)


state 83

   55 expr: call .

    $default  reduce using rule 55 (expr)


state 84

   49 expr: literal .

    $default  reduce using rule 49 (expr)


state 85

   12 if: T_IF expr . block
   13   | T_IF expr . block T_ELSE block
   15 block: . T_NEWLINE T_INDENT statements T_DEDENT
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_NEWLINE  shift, and go to state 108
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    block            go to state 109
    binary_operator  go to state 106


state 86

   48 dot_expr: expr . T_DOT id
   53 expr: T_OP expr . T_CP
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_CP       shift, and go to state 110
    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    binary_operator  go to state 106


state 87

   25 return_statement: T_RETURN expr .  [T_DEDENT, T_IF, T_ID, T_LITERAL_INT, T_OP, T_RETURN, T_WHILE, T_BANG, T_PLUS_PLUS, T_MINUS_MINUS]
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    T_OP      [reduce using rule 25 (return_statement)]
    $default  reduce using rule 25 (return_statement)

    binary_operator  go to state 106


state 88

   14 while: T_WHILE expr . block
   15 block: . T_NEWLINE T_INDENT statements T_DEDENT
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_NEWLINE  shift, and go to state 108
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    block            go to state 111
    binary_operator  go to state 106


state 89

   15 block: T_NEWLINE T_INDENT statements T_DEDENT .

    $default  reduce using rule 15 (block)


state 90

   17 statements: statements statement .

    $default  reduce using rule 17 (statements)


state 91

   41 type_name: . qualified_id
   42 variable_declaration: id T_SEMICOLON . type_name T_NEWLINE
   43                     | id T_SEMICOLON . T_EQ expr T_NEWLINE
   44                     | id T_SEMICOLON . type_name T_EQ expr T_NEWLINE
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id

    T_EQ  shift, and go to state 112
    T_ID  shift, and go to state 11

    type_name     go to state 113
    id            go to state 41
    qualified_id  go to state 42


state 92

   45 id: . T_ID
   48 dot_expr: expr T_DOT . id

    T_ID  shift, and go to state 11

    id  go to state 114


state 93

   18 statement: expr T_NEWLINE .

    $default  reduce using rule 18 (statement)


state 94

   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   72 expr_list: . expr
   73          | . expr_list T_COMMA expr
   74 call: . expr T_OP T_CP
   74     | expr T_OP . T_CP
   75     | . expr T_OP expr_list T_CP
   75     | expr T_OP . expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_CP           shift, and go to state 115
    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 116
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    expr_list            go to state 117
    call                 go to state 83
    literal              go to state 84


state 95

   59 binary_operator: T_LARR_EQ .

    $default  reduce using rule 59 (binary_operator)


state 96

   58 binary_operator: T_LT .

    $default  reduce using rule 58 (binary_operator)


state 97

   66 binary_operator: T_RARR_EQ .

    $default  reduce using rule 66 (binary_operator)


state 98

   65 binary_operator: T_GT .

    $default  reduce using rule 65 (binary_operator)


state 99

   57 binary_operator: T_EQ_EQ .

    $default  reduce using rule 57 (binary_operator)


state 100

   64 binary_operator: T_PLUS .

    $default  reduce using rule 64 (binary_operator)


state 101

   60 binary_operator: T_MINUS .

    $default  reduce using rule 60 (binary_operator)


state 102

   56 binary_operator: T_DIV .

    $default  reduce using rule 56 (binary_operator)


state 103

   62 binary_operator: T_MUL .

    $default  reduce using rule 62 (binary_operator)


state 104

   61 binary_operator: T_MODULO .

    $default  reduce using rule 61 (binary_operator)


state 105

   63 binary_operator: T_MUL_MUL .

    $default  reduce using rule 63 (binary_operator)


state 106

   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   70            | expr binary_operator . expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 118
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 107

   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   71 left_unary_expr: left_unary_operator expr .  [T_COMMA, T_CP, T_DEDENT, T_DOT, T_IF, T_ID, T_LITERAL_INT, T_NEWLINE, T_OP, T_RETURN, T_WHILE, T_BANG, T_LARR_EQ, T_LT, T_RARR_EQ, T_GT, T_EQ_EQ, T_PLUS, T_MINUS, T_DIV, T_MUL, T_MODULO, T_MUL_MUL, T_PLUS_PLUS, T_MINUS_MINUS]
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    T_DOT      [reduce using rule 71 (left_unary_expr)]
    T_OP       [reduce using rule 71 (left_unary_expr)]
    T_LARR_EQ  [reduce using rule 71 (left_unary_expr)]
    T_LT       [reduce using rule 71 (left_unary_expr)]
    T_RARR_EQ  [reduce using rule 71 (left_unary_expr)]
    T_GT       [reduce using rule 71 (left_unary_expr)]
    T_EQ_EQ    [reduce using rule 71 (left_unary_expr)]
    T_PLUS     [reduce using rule 71 (left_unary_expr)]
    T_MINUS    [reduce using rule 71 (left_unary_expr)]
    T_DIV      [reduce using rule 71 (left_unary_expr)]
    T_MUL      [reduce using rule 71 (left_unary_expr)]
    T_MODULO   [reduce using rule 71 (left_unary_expr)]
    T_MUL_MUL  [reduce using rule 71 (left_unary_expr)]
    $default   reduce using rule 71 (left_unary_expr)

    binary_operator  go to state 106


state 108

   15 block: T_NEWLINE . T_INDENT statements T_DEDENT

    T_INDENT  shift, and go to state 57


state 109

   12 if: T_IF expr block .  [T_DEDENT, T_IF, T_ID, T_LITERAL_INT, T_OP, T_RETURN, T_WHILE, T_BANG, T_PLUS_PLUS, T_MINUS_MINUS]
   13   | T_IF expr block . T_ELSE block

    T_ELSE  shift, and go to state 119

    $default  reduce using rule 12 (if)


state 110

   53 expr: T_OP expr T_CP .

    $default  reduce using rule 53 (expr)


state 111

   14 while: T_WHILE expr block .

    $default  reduce using rule 14 (while)


state 112

   43 variable_declaration: id T_SEMICOLON T_EQ . expr T_NEWLINE
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 120
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 113

   42 variable_declaration: id T_SEMICOLON type_name . T_NEWLINE
   44                     | id T_SEMICOLON type_name . T_EQ expr T_NEWLINE

    T_EQ       shift, and go to state 121
    T_NEWLINE  shift, and go to state 122


state 114

   48 dot_expr: expr T_DOT id .

    $default  reduce using rule 48 (dot_expr)


state 115

   74 call: expr T_OP T_CP .

    $default  reduce using rule 74 (call)


state 116

   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   72 expr_list: expr .  [T_COMMA, T_CP]
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    $default  reduce using rule 72 (expr_list)

    binary_operator  go to state 106


state 117

   73 expr_list: expr_list . T_COMMA expr
   75 call: expr T_OP expr_list . T_CP

    T_COMMA  shift, and go to state 123
    T_CP     shift, and go to state 124


state 118

   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   70            | expr binary_operator expr .  [T_COMMA, T_CP, T_DEDENT, T_DOT, T_IF, T_ID, T_LITERAL_INT, T_NEWLINE, T_OP, T_RETURN, T_WHILE, T_BANG, T_LARR_EQ, T_LT, T_RARR_EQ, T_GT, T_EQ_EQ, T_PLUS, T_MINUS, T_DIV, T_MUL, T_MODULO, T_MUL_MUL, T_PLUS_PLUS, T_MINUS_MINUS]
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    T_DOT      [reduce using rule 70 (binary_expr)]
    T_OP       [reduce using rule 70 (binary_expr)]
    T_LARR_EQ  [reduce using rule 70 (binary_expr)]
    T_LT       [reduce using rule 70 (binary_expr)]
    T_RARR_EQ  [reduce using rule 70 (binary_expr)]
    T_GT       [reduce using rule 70 (binary_expr)]
    T_EQ_EQ    [reduce using rule 70 (binary_expr)]
    T_PLUS     [reduce using rule 70 (binary_expr)]
    T_MINUS    [reduce using rule 70 (binary_expr)]
    T_DIV      [reduce using rule 70 (binary_expr)]
    T_MUL      [reduce using rule 70 (binary_expr)]
    T_MODULO   [reduce using rule 70 (binary_expr)]
    T_MUL_MUL  [reduce using rule 70 (binary_expr)]
    $default   reduce using rule 70 (binary_expr)

    binary_operator  go to state 106


state 119

   13 if: T_IF expr block T_ELSE . block
   15 block: . T_NEWLINE T_INDENT statements T_DEDENT

    T_NEWLINE  shift, and go to state 108

    block  go to state 125


state 120

   43 variable_declaration: id T_SEMICOLON T_EQ expr . T_NEWLINE
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_NEWLINE  shift, and go to state 126
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    binary_operator  go to state 106


state 121

   44 variable_declaration: id T_SEMICOLON type_name T_EQ . expr T_NEWLINE
   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 127
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 122

   42 variable_declaration: id T_SEMICOLON type_name T_NEWLINE .

    $default  reduce using rule 42 (variable_declaration)


state 123

   45 id: . T_ID
   46 qualified_id: . id
   47             | . qualified_id T_DOT id
   48 dot_expr: . expr T_DOT id
   49 expr: . literal
   50     | . dot_expr
   51     | . binary_expr
   52     | . left_unary_expr
   53     | . T_OP expr T_CP
   54     | . qualified_id
   55     | . call
   67 left_unary_operator: . T_BANG
   68                    | . T_MINUS_MINUS
   69                    | . T_PLUS_PLUS
   70 binary_expr: . expr binary_operator expr
   71 left_unary_expr: . left_unary_operator expr
   73 expr_list: expr_list T_COMMA . expr
   74 call: . expr T_OP T_CP
   75     | . expr T_OP expr_list T_CP
   76 literal: . T_LITERAL_INT

    T_ID           shift, and go to state 11
    T_LITERAL_INT  shift, and go to state 61
    T_OP           shift, and go to state 62
    T_BANG         shift, and go to state 65
    T_PLUS_PLUS    shift, and go to state 66
    T_MINUS_MINUS  shift, and go to state 67

    id                   go to state 41
    qualified_id         go to state 77
    dot_expr             go to state 78
    expr                 go to state 128
    left_unary_operator  go to state 80
    binary_expr          go to state 81
    left_unary_expr      go to state 82
    call                 go to state 83
    literal              go to state 84


state 124

   75 call: expr T_OP expr_list T_CP .

    $default  reduce using rule 75 (call)


state 125

   13 if: T_IF expr block T_ELSE block .

    $default  reduce using rule 13 (if)


state 126

   43 variable_declaration: id T_SEMICOLON T_EQ expr T_NEWLINE .

    $default  reduce using rule 43 (variable_declaration)


state 127

   44 variable_declaration: id T_SEMICOLON type_name T_EQ expr . T_NEWLINE
   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_NEWLINE  shift, and go to state 129
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    binary_operator  go to state 106


state 128

   48 dot_expr: expr . T_DOT id
   56 binary_operator: . T_DIV
   57                | . T_EQ_EQ
   58                | . T_LT
   59                | . T_LARR_EQ
   60                | . T_MINUS
   61                | . T_MODULO
   62                | . T_MUL
   63                | . T_MUL_MUL
   64                | . T_PLUS
   65                | . T_GT
   66                | . T_RARR_EQ
   70 binary_expr: expr . binary_operator expr
   73 expr_list: expr_list T_COMMA expr .  [T_COMMA, T_CP]
   74 call: expr . T_OP T_CP
   75     | expr . T_OP expr_list T_CP

    T_DOT      shift, and go to state 92
    T_OP       shift, and go to state 94
    T_LARR_EQ  shift, and go to state 95
    T_LT       shift, and go to state 96
    T_RARR_EQ  shift, and go to state 97
    T_GT       shift, and go to state 98
    T_EQ_EQ    shift, and go to state 99
    T_PLUS     shift, and go to state 100
    T_MINUS    shift, and go to state 101
    T_DIV      shift, and go to state 102
    T_MUL      shift, and go to state 103
    T_MODULO   shift, and go to state 104
    T_MUL_MUL  shift, and go to state 105

    $default  reduce using rule 73 (expr_list)

    binary_operator  go to state 106


state 129

   44 variable_declaration: id T_SEMICOLON type_name T_EQ expr T_NEWLINE .

    $default  reduce using rule 44 (variable_declaration)
