{
	"BadParameterCount":
	{
		"message":"Bad parameter count : expected $ExpectedParamCount, but got $ParamCount",
		"type": "Error",
		"params":
		{
			"ExpectedParamCount": "int",
			"ParamCount": "int"
		}
	},
	"CallNonFunction":
	{
		"message": "Expected function, but `$ObjectName' has type `$ObjectTypeName'",
		"type": "Error",
		"params":
		{
			"ObjectName": "std::string",
			"ObjectTypeName": "std::string"
		}
	},
	"SymbolNotFound":
	{
		"message": "Unknown symbol `$SymbolName' in `$ScopeName'",
		"type": "Error",
		"params":
		{
			"SymbolName": "std::string",
			"ScopeName": "std::string"
		}
	},
	"VariableAlreadyDefined":
	{
		"message": "Variable $VarName already defined",
		"type": "Error",
		"params":
		{
			"VarName": "std::string"
		}
	},
	"EntryPointNotFound":
	{
		"type": "FatalError",
		"message": "Entry point not found",
		"description": "Declare a main function (anywhere) :%NEWLINE   main () -> int"
	},
	"TypeExpected":
	{
		"type": "Error",
		"message": "$SymbolName is not a type",
		"params":
		{
			"SymbolName": "std::string"
		}
	},
	"SpecificTypeExpected":
	{
		"type": "Error",
		"message": "Expression of type `$ExpectedTypeName' expected, but got `$TypeName' instead",
		"params":
		{
			"ExpectedTypeName": "std::string",
			"TypeName": "std::string"
		}
	},
	"InvalidTypeInVarAssignment":
	{
		"type": "Error",
		"message": "Types mismatch in variable assigment",
		"description": "Variable $VariableName expects value of type $ExpectedTypeName, but got $TypeName instead",
		"params":
		{
			"VariableName": "std::string",
			"ExpectedTypeName": "std::string",
			"TypeName": "std::string"
		}
	},
	"CannotInstantiatePointerType":
	{
		"type": "Error",
		"message": "Pointer types cannot be instantiated",
		"description": "Trying to instantiate pointer type $PointerTypeName",
		"params":
		{
			"PointerTypeName": "std::string"
		}
	},
   "CircularClassDependency":
   {
      "type": "FatalError",
      "message": "Circular dependency",
      "description": "Class $BaseClassName depends on class $DepClassName and vice verso",
      "params":
      {
         "BaseClassName": "std::string",
         "DepClassName": "std::string"
      }
   },
   "UnsupportedArithmeticOperation":
   {
      "type": "FatalError",
      "message": "Unsupported arithmetic operation : $LeftTypeName $OpName $RightTypeName",
      "params":
      {
         "LeftTypeName": "std::string",
         "OpName": "std::string",
         "RightTypeName": "std::string"
      }
   },

   "ReturnTypeDiffersFromPrototype":
   {
      "type": "Error",
      "message": "Return type differs from function prototype",
      "description": "Function `$FuncName' is expected to return `$ExpectedRetTy', but got `$RetTy'",
      "params":
      {
         "FuncName": "std::string",
         "ExpectedRetTy": "st::Symbol*",
         "RetTy": "st::Symbol*"
      }
   },
   "NotAssignable":
   {
      "type": "Error",
      "message": "Expression is not assignable"
   },
   "BadIndentation":
   {
      "type": "FatalError",
      "message": "Bad indentation",
      "description": "Indentation must be a multiple of the indentation unit.%NEWLINE Default indentation is $DefaultIndentation, but got $Indentation.",
      "params":
      {
         "DefaultIndentation": "std::string",
         "Indentation": "std::string"
       }
   },
   "CannotAssign":
   {
      "type": "Error",
      "message": "Expected expression of type `$ExpectedTypeName', but got `$TypeName'",
      "params":
      {
         "TypeName": "std::string",
         "ExpectedTypeName": "std::string"
      }
   },
   "UnsizedType":
   {
      "type": "FatalError",
      "message": "Type `$TypeName' has no size",
      "params":
      {
         "TypeName": "std::string"
      }
   },
   "DerefNonPointer":
   {
      "type": "FatalError",
      "message": "Cannot dereference non pointer type `$TypeName'",
      "params":
      {
         "TypeName": "std::string"
      }
   },
   "InvalidCast":
   {
      "type": "Error",
      "message": "Cannot cast from `$DestType' to `$SourceType'",
      "params":
      {
         "SourceType": "st::Symbol*",
         "DestType": "st::Symbol*"
      }
   },
   "ExpectedClassType":
   {
      "type": "FatalError",
      "message": "Expected class type, but `$Type' is not",
      "params":
      {
         "Type": "st::Symbol*"
      }
   },
   "ExpectedConstant":
   {
      "type": "Error",
      "message": "Expected constant expression"
   },
   "OverridingFunction":
   {
      "type": "Warning",
      "message": "Function `$Function' overrides `$OverridenFunction'",
      "description": "Decorate the function `$Function' with `@overriding'",
      "params":
      {
         "Function": "st::Symbol*",
         "OverridenFunction": "st::Symbol*"
      }
   },
   "DifferentOperandsType":
   {
      "type": "Error",
      "message": "Operands don't have the same type",
      "params":
      {
         "LeftType": "st::Symbol*",
         "RightType": "st::Symbol*"
      }
   },
   "AutoInclude":
   {
      "type": "Warning",
      "message": "File `$FilePath' is trying to include itself",
      "description": "Include has been ignored.",
      "params":
      {
         "FilePath": "std::string"
      }
   },
   "BuildFailed":
   {
      "type": "FatalError",
      "message": "Build FAILED"
   }
}
