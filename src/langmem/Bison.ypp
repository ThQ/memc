%parse-param{mem::ast::node::File* ast}
%parse-param{mem::st::SymbolTable* symbols}
%parse-param{mem::log::Logger* logger}
%parse-param{mem::fs::File* file}

%code requires{
#define PASS (0);
#include <stdio.h>
#include <string.h>
#ifndef INCLUDED_BISON_HPP
#define INCLUDED_BISON_HPP
#include "langmem/Bison.hpp"
#endif
#include "langmem/Tokenizer.hpp"
#include "mem/ast/node/ArrayType.hpp"
#include "mem/ast/node/BinaryOp.hpp"
#include "mem/ast/node/Block.hpp"
#include "mem/ast/node/BracketOp.hpp"
#include "mem/ast/node/Call.hpp"
#include "mem/ast/node/CastOp.hpp"
#include "mem/ast/node/Class.hpp"
#include "mem/ast/node/Decorator.hpp"
#include "mem/ast/node/Dot.hpp"
#include "mem/ast/node/EnumType.hpp"
#include "mem/ast/node/Field.hpp"
#include "mem/ast/node/File.hpp"
#include "mem/ast/node/FinalId.hpp"
#include "mem/ast/node/For.hpp"
#include "mem/ast/node/Func.hpp"
#include "mem/ast/node/If.hpp"
#include "mem/ast/node/New.hpp"
#include "mem/ast/node/Number.hpp"
#include "mem/ast/node/Ptr.hpp"
#include "mem/ast/node/Return.hpp"
#include "mem/ast/node/Root.hpp"
#include "mem/ast/node/String.hpp"
#include "mem/ast/node/Text.hpp"
#include "mem/ast/node/Tuple.hpp"
#include "mem/ast/node/TupleType.hpp"
#include "mem/ast/node/UnaryOp.hpp"
#include "mem/ast/node/Use.hpp"
#include "mem/ast/node/VarAssign.hpp"
#include "mem/ast/node/VarDecl.hpp"
#include "mem/ast/node/While.hpp"
#include "mem/fs/File.hpp"
#include "mem/fs/FileManager.hpp"
#include "mem/fs/position/Range.hpp"
#include "mem/log/Logger.hpp"
#include "mem/st/SymbolTable.hpp"
#include "mem/st/util.hpp"
#include "mem/number.hpp"

using namespace mem;

#ifndef YYERROR_VERBOSE
#define YYERROR_VERBOSE 1
#endif

#define YYLTYPE fs::position::Range
#define YYLTYPE_IS_DECLARED 1

#define YYLLOC_DEFAULT(Current, Rhs, N) \
   do \
   { \
      if (YYID (N)) \
      { \
         (Current).setLineStart(YYRHSLOC (Rhs, 1).LineStart()); \
         (Current).setLineEnd(YYRHSLOC (Rhs, 1).LineEnd()); \
         (Current).setColumnStart(YYRHSLOC (Rhs, 1).ColumnStart()); \
         (Current).setColumnEnd(YYRHSLOC (Rhs, N).ColumnEnd()); \
         (Current).sFile(YYRHSLOC(Rhs, 1)._file); \
      } \
      else \
      { \
         (Current).setLineStart(YYRHSLOC (Rhs, 0).LineStart()); \
         (Current).setLineEnd(YYRHSLOC (Rhs, 0).LineEnd()); \
         (Current).setColumnStart(YYRHSLOC (Rhs, 0).ColumnEnd()); \
         (Current).setColumnEnd(YYRHSLOC (Rhs, 0).ColumnEnd()); \
         (Current).sFile(NULL); \
      } \
   } \
   while (YYID (0))

extern langmem::Tokenizer gTOKENIZER;
}

%code {

langmem::Tokenizer gTOKENIZER;

int yylex()
{
   langmem::Token t = gTOKENIZER.getNextToken();

   switch (t.Kind())
   {
      case T_ID:
      case T_OP:
      case T_STRING:
      case T_LITERAL_NUMBER:
         std::string* str = new std::string();
         str->assign(t.Value());
         yylval.text = str;
         break;
   }
   yylloc = t.Location();
   return t.Kind();
}

void yyerror(ast::node::Node* ast,
   mem::st::SymbolTable* symbols,
   ::mem::log::Logger* logger, // Type ambiguity for gcc-c++ 4.2.1 on FreeBSD
   fs::File* file,
   const char *s)
{
   fs::position::Position* pos = new fs::position::Position();
   pos->sFile(file);

   log::Message* msg = new log::Error();
   msg->setPrimaryText("Syntax error");
   msg->setSecondaryText(s);
   msg->setPosition(pos);
   logger->log(msg);
}
}

%code requires {
}

%union
{
   std::string* text;
   mem::ast::node::Node* node;
   mem::ast::node::Text* text_node;
   mem::ast::node::Id* id_node;
   mem::ast::node::FinalId* final_id_node;
   mem::ast::node::BinaryOp* binary_op_node;
   mem::ast::node::Block* block_node;
   mem::ast::node::Decorator* decorator_node;
   mem::ast::node::Func* func_node;
   mem::ast::node::NodeList* node_list;
   mem::ast::node::VarDecl* var_decl_node;
   mem::ast::node::While* while_node;
}

%code {
}


%locations
%token T_AMPERSAND
%token T_AROBASE
%token T_AND
%token T_BANG
%token T_BANG_EQ
%token T_CLASS
%token T_COLON
%token T_COMMA
%token T_CP
%token T_DEDENT
%token T_DOT
%token T_DOTDOTDOT
%token T_ELSE
%token T_ENUM
%token T_EQ
%token T_FOR
%token T_HASH
%token T_IF
%token <text> T_ID
%token T_INDENT
%token T_INTERFACE
%token T_LBRACKET
%token T_LEFT_BINARY_OP
%token T_LITERAL_FLOAT
%token T_LITERAL_HEX
%token <text> T_LITERAL_INT
%token <text> T_LITERAL_NUMBER
%token T_NEW
%token T_NEWLINE
%token T_OP
%token T_OR
%token T_PASS
%token T_OBJECT
%token T_QUOTE
%token T_RBRACKET
%token T_RARR
%token T_RETURN
%token T_SEMICOLON
%token T_SINGLE_LINE_COMMENT
%token T_SPACE
%token T_STAR
%token <text> T_STRING
%token T_USE
%token T_WHILE
%token T_WHITESPACE

// Lower precedence first
%left <node> T_AND T_OR
%left <node> T_EQ_EQ T_GT T_GT_EQ T_LT T_RARR T_LT_EQ T_BANQ_EQ
%left <node> T_MINUS T_PLUS
%left <node> T_STAR T_DIV
%left <node> T_LT_LT T_GT_GT T_BIT_OR T_BIT_AND T_XOR
%left <node> T_MUL_MUL T_MODULO
%left <node> T_MINUS_MINUS T_PLUS_PLUS
%left <node> T_OP T_CP T_LBRACKET T_RBRACKET
%left <node> T_DOT T_AROBASE

%type <var_decl_node> argument
%type <node_list> argument_list
%type <binary_op_node> binary_expr
%type <binary_op_node> binary_operator
%type <binary_op_node> bool_operator
%type <binary_op_node> comp_operator
%type <binary_op_node> math_operator
%type <block_node> block
%type <node> call
%type <node> class_declaration
%type <node_list> class_members
%type <node> compound_statement
%type <node> dot_expr
%type <node> enum_declaration
%type <node_list> enum_fields
%type <node> expr
%type <node_list> expr_list
%type <final_id_node> final_id
%type <node> for_statement
%type <node> for_initialization_statement
%type <node> for_iteration_statement
%type <func_node> function_declaration
%type <func_node> function_name
%type <id_node> id
%type <node> if
%type <node> literal
%type <node_list> members_declarations
%type <node> member_declaration
%type <decorator_node> metadata
%type <block_node> newline_or_block
%type <node> return_statement
%type <node> return_type_or_null
%type <node> simple_statement
%type <node> statement
%type <block_node> statements
%type <node> tuple_type
%type <node> type_name
%type <node_list> type_list
%type <text_node> use
%type <text_node> use_file
%type <node> variable_assignment
%type <node> variable_declaration
%type <while_node> while
%type <node> qualified_id

%%

input :
   /* empty */
   | input T_NEWLINE
   | input T_DEDENT
   | input T_WHITESPACE T_NEWLINE
   | input use
   {
      ast->addChild($2);
   }
   | input class_declaration
   {
      ast->addChild($2);
   }
   | input enum_declaration
   {
      ast->addChild($2);
   }
   | input function_declaration
   {
      ast->addChild($2);
   }


use:
   T_USE use_file
   {
      $$ = new mem::ast::node::Use();
      $$->setValue($2->Value());
      $$->setPosition(new fs::position::Range(@1, @2));

      delete $2;
   }

use_file :
   T_ID
   {
      $$ = new mem::ast::node::Text();
      $$->setValue($1->c_str());
      delete $1;
   }
   | use_file T_DOT T_ID
   {
      $$->setValue($$->Value() + '.' + $3->c_str());

      delete $3;
   }

metadata :
   T_AROBASE id T_NEWLINE
   {
      $$ = new mem::ast::node::Decorator();
      $$->setValue($2->Value());
      $$->setNameNode($1);
      $$->setPosition(new fs::position::Range(@1, @2));
   }
   | T_AROBASE id T_OP expr T_CP T_NEWLINE
   {
      $$ = new mem::ast::node::Decorator();
      $$->setValue($2->Value());
      $$->setPosition(new fs::position::Range(@1, @5));

      delete $4;
   }

//=============================================================================
// CLASS
//=============================================================================

class_declaration:
   T_CLASS id class_members
   {
      mem::ast::node::Class* cls = new mem::ast::node::Class();
      cls->setValue($2->Value());
      cls->setNameNode($2);
      cls->setMembersNode($3);
      cls->setPosition(new fs::position::Range(@$));

      $$ = cls;
   }
   | T_CLASS id T_LT type_name class_members
   {
      mem::ast::node::Class* cls = new mem::ast::node::Class();
      cls->setValue($2->Value());
      cls->setNameNode($2);
      cls->setParentTypeNode($4);
      cls->setMembersNode($5);
      cls->setPosition(new fs::position::Range(@$));

      $$ = cls;
   }

class_members:
   T_NEWLINE T_INDENT members_declarations
   {
      $$ = $3;
   }


//=============================================================================
// ENUM
//=============================================================================

enum_declaration:
   T_ENUM id T_NEWLINE T_INDENT enum_fields
   {
      mem::ast::node::EnumType* e = new mem::ast::node::EnumType();
      e->setNameNode($2);
      e->setValue($2->Value());
      e->setMembersNode($5);

      $$ = e;
   }

enum_fields:
   variable_declaration T_NEWLINE
   {
      $$ = new mem::ast::node::NodeList();
      $$->addChild($1);
   }
   | enum_fields variable_declaration T_NEWLINE
   {
      assert($2 != NULL);
      $$->addChild($2);
   }


//=============================================================================
// FUNCTION
//=============================================================================

function_name:
   id
   {
      mem::ast::node::Func* func = new mem::ast::node::Func();
      func->setNameNode($1);
      func->setPosition(@$.copy_range());
      func->setValue($1->Value());
      $$ = func;
   }
   | metadata id
   {
      mem::ast::node::Func* func = new mem::ast::node::Func();
      func->setDecoratorNode($1);
      func->setNameNode($2);
      func->setValue($2->Value());
      func->setPosition(@2.copy_range());
      $$ = func;
   }

newline_or_block:
   T_NEWLINE { $$ = NULL; }
   | block

return_type_or_null:
   /* EMPTY */
   {
      $$ = NULL;
   }
   | T_RARR type_name { $$ = $2; }

function_declaration:
   // Ex: my_function_name() -> my_return_type
   function_name T_OP T_CP return_type_or_null newline_or_block
   {
      $$ = $1;

      // Return type
      if ($4 != NULL) $$->setReturnTypeNode(mem::ast::node::cast<mem::ast::node::FinalId>($4));
      else
      {
         mem::ast::node::FinalId* void_ty = new mem::ast::node::FinalId();
         void_ty->setValue("void");
         $$->setReturnTypeNode(void_ty);
      }

      // Body block
      if ($5 != NULL) $$->setBodyNode(mem::ast::node::cast<mem::ast::node::Block>($5));

      $$->setPosition(@$.copy_range());
   }
   // Ex: my_function_name(my_variable :my_type) :my_return_type
   | function_name T_OP argument_list T_CP return_type_or_null newline_or_block
   {
      $$ = $1;

      // Argument list
      $$->setParamsNode($3);

      // Return type
      if ($5 != NULL) $$->setReturnTypeNode(mem::ast::node::cast<mem::ast::node::Type>($5));
      else
      {
         mem::ast::node::FinalId* void_ty = new mem::ast::node::FinalId();
         void_ty->setValue("void");
         $$->setReturnTypeNode(void_ty);
      }

      // Body block
      if ($6 != NULL) $$->setBodyNode(mem::ast::node::cast<mem::ast::node::Block>($6));

      $$->setPosition(@$.copy_range());
   }


argument_list:
   argument
   {
      $$ = new mem::ast::node::NodeList();
      $$->addChild($1);
      $$->setPosition(@1.copy_range());
   }
   | argument_list T_COMMA argument
   {
      $$->addChild($3);
      $$->Position()->append(@3);
   }

argument:
   final_id T_SEMICOLON type_name
   {
      $$ = new mem::ast::node::VarDecl();
      $$->setNameNode($1);
      $$->setTypeNode($3);
      $$->setPosition(new fs::position::Range(@1, @3));
   }


///////////////////////////////////////////////////////////////////////////////
// CONTROL FLOW
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// If
//-----------------------------------------------------------------------------

if:
   // SIMPLE IF
   T_IF expr block
   {
      mem::ast::node::If* n = new mem::ast::node::If();
      n->setConditionNode($2);
      n->setIfBlockNode($3);
      n->setPosition(new fs::position::Range(@1, @2));
      $$ = n;
   }
   // IF / ELSE
   | T_IF expr block T_ELSE block
   {
      mem::ast::node::If* n = new mem::ast::node::If();
      n->setConditionNode($2);
      n->setIfBlockNode($3);
      n->setElseBlockNode($5);
      n->setPosition(new fs::position::Range(@1, @5));
      $$ = n;
   }


//-----------------------------------------------------------------------------
// While
//-----------------------------------------------------------------------------

while:
   T_WHILE expr block
   {
      $$ = new mem::ast::node::While();
      $$->setConditionNode($2);
      $$->setBlockNode($3);
      $$->setPosition(new fs::position::Range(@1, @3));
   }


//-----------------------------------------------------------------------------
// For
//-----------------------------------------------------------------------------

for_initialization_statement:
     variable_declaration
   | variable_assignment
   | expr

for_iteration_statement:
     variable_assignment
   | expr

for_statement:
   T_FOR for_initialization_statement T_COLON expr T_COLON for_iteration_statement block
   {
      mem::ast::node::For* n = new mem::ast::node::For();
      n->setInitializationNode($2);
      n->setConditionNode($4);
      n->setIterationNode($6);
      n->setBlockNode(mem::ast::node::cast<mem::ast::node::Block>($7));
      $$ = n;
      $$->setPosition(new fs::position::Range(@1, @7));
   }

block:
   T_NEWLINE T_INDENT statements T_DEDENT
   {
      $$ = mem::ast::node::cast<mem::ast::node::Block>($3);
   }

statements:
   statement
   {
      assert ($1 != NULL);
      $$ = new mem::ast::node::Block();
      $$->addChild($1);
   }
   | statements statement
   {
      assert ($$ != NULL);
      $$->addChild($2);
   }

statement:
   expr T_NEWLINE
   {
      $$ = $1;
   }
   | simple_statement T_NEWLINE
   {
      $$ = $1;
   }
   | compound_statement
   {
      $$ = $1;
   }

compound_statement:
     if
   | while
   | for_statement

simple_statement:
     variable_declaration
   | variable_assignment
   | return_statement

return_statement:
   T_RETURN expr
   {
      mem::ast::node::Return* n = new mem::ast::node::Return();
      n->setValueNode($2);
      $$ = n;
   }


members_declarations:
   member_declaration
   {
      $$ = new mem::ast::node::NodeList();
      $$->addChild($1);
   }
   | members_declarations member_declaration
   {
      assert ($1 != NULL);
      $$->addChild($2);
   }

member_declaration:
   // Ex: my_variable :my_type
   final_id T_SEMICOLON type_name T_NEWLINE
   {
      mem::ast::node::Field* field = new mem::ast::node::Field();
      field->setPosition(@$.copy_range());
      field->setNameNode($1);
      field->setTypeNode($3);

      $$ = (ast::node::Node*)field;
   }
   | function_declaration

type_name:
   qualified_id
   {
      $$ = static_cast<ast::node::Node*>($1);
      $$->setPosition(@$.copy_range());
   }
   | type_name T_STAR
   {
      mem::ast::node::Ptr* ptr = new mem::ast::node::Ptr();
      ptr->setTypeNode($1);
      $$ = ptr;
      $$->setPosition(@$.copy_range());
   }
   | T_LBRACKET type_name T_RBRACKET
   {
      mem::ast::node::ArrayType* arr = new mem::ast::node::ArrayType();
      arr->setTypeNode($2);
      $$ = static_cast<ast::node::Node*>(arr);
      $$->setPosition(@$.copy_range());
   }
   | T_LBRACKET type_name T_COMMA expr T_RBRACKET
   {
      mem::ast::node::ArrayType* arr = new mem::ast::node::ArrayType();
      arr->setTypeNode($2);
      arr->setLengthNode($4);
      $$ = static_cast<ast::node::Node*>(arr);
      $$->setPosition(@$.copy_range());
   }
   | tuple_type

type_list:
   type_name
   {
      $$ = new mem::ast::node::TupleType();
      $$->addChild($1);
   }
   | type_list T_COMMA type_name
   {
      assert ($1 != NULL);
      $$->addChild($3);
   }

tuple_type:
   T_OP type_list T_CP
   {
      $$ = $2;
   }

variable_assignment :
   expr T_EQ expr
   {
      mem::ast::node::VarAssign* n = new mem::ast::node::VarAssign();
      n->setPosition(@$.copy_range());
      n->setNameNode($1);
      n->setValueNode($3);
      $$ = (ast::node::Node*)n;
   }

variable_declaration :
   // Ex: my_variable :my_type
   final_id T_SEMICOLON type_name
   {
      mem::ast::node::VarDecl* n = new mem::ast::node::VarDecl();
      n->setNameNode($1);
      n->setTypeNode($3);
      n->setPosition(@$.copy_range());
      $$ = (ast::node::Node*)n;
   }
   // Ex: my_variable := my_function()
   | final_id T_SEMICOLON T_EQ expr
   {
      mem::ast::node::Node* ty_place_holder = new mem::ast::node::Node();
      ty_place_holder->setKind(ast::node::Kind::PLACE_HOLDER);
      ty_place_holder->setPosition(@3.copy_range());

      mem::ast::node::VarDecl* n = new mem::ast::node::VarDecl();
      n->setNameNode($1);
      n->setTypeNode(ty_place_holder);
      n->setValueNode($4);
      n->setPosition(@$.copy_range());
      $$ = (ast::node::Node*)n;
   }
   // Ex: my_variable :my_type = my_function()
   | final_id T_SEMICOLON type_name T_EQ expr
   {
      mem::ast::node::VarDecl* n = new mem::ast::node::VarDecl();
      n->setNameNode($1);
      n->setTypeNode($3);
      n->setValueNode($5);
      n->setPosition(@$.copy_range());
      $$ = (ast::node::Node*)n;
   }

final_id:
   T_ID
   {
      $$ = new mem::ast::node::FinalId();
      $$->setPosition(new fs::position::Range(@$));
      $$->setValue($1->c_str());

      delete $1;
   }

id:
   T_ID
   {
      $$ = new mem::ast::node::Id();
      $$->setPosition(new fs::position::Range(@$));
      $$->setValue($1->c_str());

      delete $1;
   }

/* RECURSIVE */
qualified_id:
   id
   {
      mem::ast::node::FinalId* n = new mem::ast::node::FinalId();
      n->setValue($1->Value());
      n->setPosition(@$.copy_range());
      delete $1;
      $$ = static_cast<ast::node::Text*>(n);
      assert($$->Position() != NULL);
   }
   | qualified_id T_DOT id
   {
      mem::ast::node::Dot* n = new mem::ast::node::Dot();
      n->setLeftNode($1);
      n->setRightNode($3);
      if (n->Position() != NULL)
      {
         n->Position()->append(@$);
      }
      else
      {
         n->setPosition(@$.copy_range());
      }
      $$ = n;
   }

dot_expr:
   T_OP expr T_CP T_DOT id
   {
      mem::ast::node::Dot* n = new mem::ast::node::Dot();
      n->setPosition(@$.copy_range());
      n->setLeftNode($2);
      n->setRightNode($5);
      $$ = n;
   }

expr:
   literal
   {
      $$ = $1;
   }
   | dot_expr
   {
      $$ = $1;
   }
   | binary_expr
   {
      $$ = (ast::node::Node*)$1;
   }
   /* ex: (1 + 2 + 3) */
   | T_OP expr T_CP
   {
      mem::ast::node::NodeList* n = new mem::ast::node::NodeList();
      n->addChild($2);

      $$ = n;
   }
   | T_OP expr_list T_CP
   {
      mem::ast::node::Tuple* n = new mem::ast::node::Tuple();
      n->eat($2);
      $$ = n;

      delete $2;
   }
   | qualified_id
   {
      $$ = static_cast<ast::node::Node*>($1);
   }
   | call
   {
      $$ = (ast::node::Node*)$1;
   }
   | T_AMPERSAND expr
   {
      mem::ast::node::UnaryOp* n = new mem::ast::node::UnaryOp();
      n->setKind(ast::node::Kind::AMPERSAND);
      n->setValueNode($2);
      $$ = n;
   }
   | T_AROBASE expr
   {
      mem::ast::node::UnaryOp* n = new mem::ast::node::UnaryOp();
      n->setKind(ast::node::Kind::DEREF);
      n->setValueNode($2);
      $$ = n;
   }
   | T_NEW type_name
   {
      mem::ast::node::New* n = new mem::ast::node::New();
      n->setTypeNode($2);
      $$ = n;
      $$->setPosition(@$.copy_range());
   }
   | expr T_SEMICOLON type_name
   {
      mem::ast::node::CastOp* n = new mem::ast::node::CastOp();
      n->setValueNode($1);
      n->setTypeNode($3);

      $$ = n;
      $$->setPosition(@$.copy_range());
   }
   | expr T_LBRACKET expr T_RBRACKET
   {
      mem::ast::node::BracketOp* n = new mem::ast::node::BracketOp();
      n->setValueNode($1);
      n->setIndexNode($3);
      $$ = n;
   }

bool_operator:
   T_AND
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_AND);
   }
   | T_OR
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_OR);
   }

comp_operator:
   // ex: true == false
   T_EQ_EQ
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_EQ_EQ);
   }
   // ex 1 < 2
   | T_LT
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_LT);
   }
   // ex: 1 <= 2
   | T_LT_EQ
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_LTE);
   }
   // ex: 1 > 2
   | T_GT
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_GT);
   }
   // ex: 1 >= 2
   | T_GT_EQ
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_GTE);
   }
   // ex: 1 != 2
   | T_BANG_EQ
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_NE);
   }

math_operator:
   // ex: 1 + 2
   T_PLUS
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_PLUS);
   }
   | T_MINUS
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_MINUS);
   }
   | T_STAR
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_MUL);
   }
   | T_DIV
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_DIV);
   }
   | T_GT_GT
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_RSHIFT);
   }
   | T_LT_LT
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_LSHIFT);
   }
   | T_BIT_OR
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_BIT_OR);
   }
   | T_BIT_AND
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_BIT_AND);
   }
   | T_XOR
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_XOR);
   }
   | T_MODULO
   {
      $$ = new mem::ast::node::BinaryOp();
      $$->setKind(ast::node::Kind::OP_MODULO);
   }

binary_operator:
   bool_operator | comp_operator | math_operator

binary_expr:
   expr binary_operator expr
   {
      mem::ast::node::BinaryOp* n = $2;
      n->setLeftNode($1);
      n->setRightNode($3);
      n->setPosition(@$.copy_range());
      $$ = n;
   }


expr_list :
   expr
   {
      $$ = new mem::ast::node::NodeList();
      $$->addChild($1);
   }
   | expr_list T_COMMA expr
   {
      if ($$ == 0)
      {
         $$ = new mem::ast::node::NodeList();
      }
      $$->addChild($3);
   }

call :
   /* ex: my_func() */
   qualified_id T_OP T_CP
   {
      mem::ast::node::Call* n = new mem::ast::node::Call();
      n->setCallerNode($1);
      $$ = n;
      $$->setPosition(new fs::position::Range(@1, @3));
   }
   /* ex: my_func(1, 2, 3) */
   | qualified_id T_OP expr_list T_CP
   {
      mem::ast::node::Call* n = new mem::ast::node::Call();
      n->setCallerNode($1);
      n->setParamsNode($3);
      $$->setPosition(new fs::position::Range(@1, @4));
   }

literal :
   T_LITERAL_NUMBER
   {
      int i = 0;
      number::parseIntNumber(*$1, i);
#if 0

      switch (nb_format)
      {
         case 'c':
         {
            mem::st::IntConstant* ic = mem::st::util::getNativeCharConstant(symbols->System(), (char)i);
            ic->setType(symbols->_core_types.CharTy());

            mem::ast::node::Number* c_node = new mem::ast::node::Number();
            c_node->setBoundSymbol(ic);
            c_node->setExprType(symbols->_core_types.CharTy());
            $$ = c_node;
            break;
         }
         case 's':
         {
            mem::st::IntConstant* ic = mem::st::util::getNativeShortConstant(symbols->System(), (short)i);
            ic->setType(symbols->_core_types.ShortTy());

            mem::ast::node::Number* s_node = new mem::ast::node::Number();
            s_node->setBoundSymbol(ic);
            s_node->setExprType(symbols->_core_types.ShortTy());
            $$ = s_node;
            break;
         }
         case 'i':
         {
#endif
            mem::st::IntConstant* ic = mem::st::util::getNativeShortConstant(symbols->System(), i);
            ic->setType(symbols->_core_types.IntTy());

            mem::ast::node::Number* i_node = new mem::ast::node::Number();
            i_node->setBoundSymbol(ic);
            i_node->setExprType(symbols->_core_types.IntTy());
            $$ = i_node;
#if 0
            break;
         }
      }
#endif

      assert ($$ != NULL);

      if ($$ != NULL)
      {
         $$->setPosition(@1.copy_range());
      }
      else
      {
         assert(false);
         //FIXME Couldnt fit this value into a numeric type, so should fail
      }

      delete $1;
   }
   | T_STRING
   {
      mem::ast::node::String* str = new mem::ast::node::String();
      str->setValue($1->c_str());
      str->setPosition(@1.copy_range());

      $$ = str;

      delete $1;
   }
%%

#include "mem/ast/node/Node.hpp"
